{"mappings":"qhBAsDA,IAAAA,EAAAC,EAAA,SAEA,IAAIC,EAAe,EACfC,EAAa,EACbC,EAAY,EAmBHC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAEN,MACEC,UAAYC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,IACvBN,EAAMO,cACVb,EAAe,EAEfC,EAAaa,OAAOJ,EAAMK,OAC1Bb,EAAYY,OAAOH,EAAKI,OACxBC,aAAY,KACVhB,GAAgB,EACZA,EAAeY,EAAOG,QAjC9B,SAAuBE,EAAUR,GAC/B,MAAMS,EAAgBC,KAAKC,SAAW,GAChCC,EAAM,C,SACVJ,E,MACAR,GAEF,OAAO,IAAIa,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLP,EACFK,EAAQF,GAERG,EAAOH,KAERZ,MAwBHiB,CAAc1B,EAAcC,GACzB0B,MAAK,EAACV,SAAEA,EAAQR,MAAEA,MACjBmB,QAAQC,IAAI,uBAAqBZ,QAAiBR,OAClDqB,EAAAhC,GAASiC,OAAOC,QACd,uBAAqBf,QAAiBR,UAGzCwB,OAAM,EAAChB,SAAEA,EAAQR,MAAEA,MAClBmB,QAAQC,IAAI,sBAAoBZ,QAAiBR,OACjDqB,EAAAhC,GAASiC,OAAOG,QACd,sBAAoBjB,QAAeR,UAIzCR,GAAcC,KACbA","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// let positionProm = 0;\n// let delayValue = 0;\n// let stepValue = 0;\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// const form = document.querySelector('.form');\n\n// form.addEventListener('submit', onSubmit);\n\n// function onSubmit(event) {\n//   event.preventDefault();\n\n//   const {\n//     elements: { delay, step, amount },\n//   } = event.currentTarget;\n//   positionProm = 0;\n\n//   delayValue = Number(delay.value);\n//   stepValue = Number(step.value);\n//   setInterval(() => {\n//     positionProm += 1;\n//     if (positionProm > amount.value) {\n//       return;\n//     }\n\n//     createPromise(positionProm, delayValue)\n//       .then(resolve => {\n//         Notiflix.Notify.success(resolve);\n//       })\n//       .catch(reject => {\n//         Notiflix.Notify.failure(reject);\n//       });\n\n//     delayValue += stepValue;\n//   }, stepValue);\n// }\n// ============================================================================================================\n// ================================================V2==========================================================\n// ============================================================================================================\nimport Notiflix from 'notiflix';\n\nlet positionProm = 0;\nlet delayValue = 0;\nlet stepValue = 0;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const obj = {\n    position,\n    delay,\n  };\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(obj);\n      } else {\n        reject(obj);\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  positionProm = 0;\n\n  delayValue = Number(delay.value);\n  stepValue = Number(step.value);\n  setInterval(() => {\n    positionProm += 1;\n    if (positionProm > amount.value) {\n      return;\n    }\n\n    createPromise(positionProm, delayValue)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delayValue += stepValue;\n  }, stepValue);\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$positionProm","$47d4ff9957288465$var$delayValue","$47d4ff9957288465$var$stepValue","document","querySelector","addEventListener","event","preventDefault","elements","delay","delay1","step","amount","currentTarget","Number","value","setInterval","position","shouldResolve","Math","random","obj","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","console","log","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.4ee95ca8.js.map"}