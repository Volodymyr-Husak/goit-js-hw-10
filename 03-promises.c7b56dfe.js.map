{"mappings":"iiBAsDA,IAAAA,EAAAC,EAAA,SAEIC,EAAe,EACfC,EAAa,EACbC,EAAY,EAmBHC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAE3Bd,EAAe,EAEfC,EAAac,OAAOJ,EAAMK,OAC1Bd,EAAYa,OAAOF,EAAKG,OACxBC,aAAY,WA/Bd,IAAuBC,EAAUN,EACzBO,EACAC,GA8BJpB,GAAgB,GACGc,EAAOE,SAjCPE,EAqCLlB,EArCeY,EAqCDX,EApCxBkB,EAAgBE,KAAKC,SAAW,GAChCF,EAAM,CACVF,WACAN,SAEK,IAAIW,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQJ,GAERK,EAAOL,KAERR,OAyBAe,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUN,EAAKgB,EAALhB,MACjBiB,QAAQC,IAAI,uBAAwCC,OAAfb,EAAS,QAAYa,OAANnB,EAAM,OAC1DoB,EAAAlC,GAASmC,OAAOC,QACd,uBAAwCH,OAAfb,EAAS,QAAYa,OAANnB,EAAM,UAGjDuB,OAAM,SAAAP,G,IAAGV,EAAQU,EAARV,SAAUN,EAAKgB,EAALhB,MAClBiB,QAAQC,IAAI,sBAAuCC,OAAfb,EAAS,QAAYa,OAANnB,EAAM,OACzDoB,EAAAlC,GAASmC,OAAOG,QACd,sBAAqCL,OAAfb,EAAS,QAAYa,OAANnB,EAAM,UAIjDX,GAAcC,KACbA,M","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// let positionProm = 0;\n// let delayValue = 0;\n// let stepValue = 0;\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// const form = document.querySelector('.form');\n\n// form.addEventListener('submit', onSubmit);\n\n// function onSubmit(event) {\n//   event.preventDefault();\n\n//   const {\n//     elements: { delay, step, amount },\n//   } = event.currentTarget;\n//   positionProm = 0;\n\n//   delayValue = Number(delay.value);\n//   stepValue = Number(step.value);\n//   setInterval(() => {\n//     positionProm += 1;\n//     if (positionProm > amount.value) {\n//       return;\n//     }\n\n//     createPromise(positionProm, delayValue)\n//       .then(resolve => {\n//         Notiflix.Notify.success(resolve);\n//       })\n//       .catch(reject => {\n//         Notiflix.Notify.failure(reject);\n//       });\n\n//     delayValue += stepValue;\n//   }, stepValue);\n// }\n// ============================================================================================================\n// ================================================V2==========================================================\n// ============================================================================================================\nimport Notiflix from 'notiflix';\n\nlet positionProm = 0;\nlet delayValue = 0;\nlet stepValue = 0;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const obj = {\n    position,\n    delay,\n  };\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(obj);\n      } else {\n        reject(obj);\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  positionProm = 0;\n\n  delayValue = Number(delay.value);\n  stepValue = Number(step.value);\n  setInterval(() => {\n    positionProm += 1;\n    if (positionProm > amount.value) {\n      return;\n    }\n\n    createPromise(positionProm, delayValue)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delayValue += stepValue;\n  }, stepValue);\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$positionProm","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$stepValue","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","Number","value","setInterval","position","shouldResolve","obj","Math","random","Promise","resolve","reject","setTimeout","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.c7b56dfe.js.map"}